// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String @unique
  email String @unique
  name String?
  username String @unique

  pkm_history PkmHistory[]
  epiphany_items PkmEpiphany[]
  inbox_items PkmInbox[]
  passing_thought_items PkmPassingThought[]
  todo_items PkmTodo[]
  voided_passing_thought_items PkmVoid[]
  trash_items PkmTrash[]
}

model PkmHistory {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  model_type String
  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  epiphany_item PkmEpiphany?
  inbox_item PkmInbox?
  passing_thought_item PkmPassingThought?
  todo_item PkmTodo?
  void_item PkmVoid?
  trash_item PkmTrash?

  is_current Boolean @default(false)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmEpiphany {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @default("Your epiphany item content here")
  name String @default("New epiphany item")
  summary String @default("Summarise your epiphany item here")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  // Not sure how to achieve polymorphism. I'm not sold on https://github.com/prisma/prisma/discussions/11108
  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmInbox {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content String @default("Your inbox item content here")
  name String @default("New inbox item")
  summary String @default("Summarise your inbox item here")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmPassingThought {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content String @default("Your passing thought item content here")
  name String @default("New passing thought item")
  summary String @default("Summarise your passing thought item here")
  void_at DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmTodo {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content String @default("Your todo item content here")
  name String @default("New todo item")
  summary String @default("Summarise your todo item here")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmVoid {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content String @default("Your void item content here")
  name String @default("New void item")
  summary String @default("Summarise your void item here")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}

model PkmTrash {
  history_id String @id @default(uuid()) @db.Uuid
  model_id String @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content String @default("Your trash item content here, though this should have been specified by the item before being moved to the trash")
  name String @default("New trash item, though this should have been specified by the item before being moved to the trash")
  summary String @default("Summarise your trash item here, though this should have been specified by the item before being moved to the trash")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.Uuid

  history PkmHistory @relation(fields: [history_id], references: [history_id], onDelete: Cascade)

  // Add an index for non unique foreign keys
  @@index([user_id])
}